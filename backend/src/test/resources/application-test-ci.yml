spring:
  application:
    name: test-ci
  output:
    ansi:
      enabled: always

  # CI 환경에서는 H2 메모리 DB 하드코딩 (환경변수 불필요)
  datasource:
    url: jdbc:h2:mem:db_test;MODE=MySQL
    username: sa
    password: ""
    driver-class-name: org.h2.Driver

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        use_sql_comments: true
        format_sql: true
        highlight_sql: true

  # Redis는 GitHub Actions 서비스 컨테이너 사용 (하드코딩)
  data:
    redis:
      host: localhost
      port: 6379
      password: ""

  # 테스트용 OAuth 설정 (하드코딩)
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: test-kakao-client-id
            client-secret: test-kakao-client-secret
            client-name: Kakao
            scope: profile_nickname, account_email
          naver:
            client-id: test-naver-client-id
            client-secret: test-naver-client-secret
            client-name: Naver
            scope: profile, email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

springdoc:
  default-produces-media-type: application/json;charset=UTF-8

logging:
  level:
    root: INFO
    org.springframework: INFO
    org.hibernate: INFO
    com.ai.lawyer: DEBUG

# JWT만 환경변수로 처리 (보안상 중요)
custom:
  jwt:
    secretKey: ${CUSTOM_JWT_SECRET_KEY}
    accessToken:
      expirationSeconds: ${CUSTOM_JWT_ACCESS_TOKEN_EXPIRATION_SECONDS:3600}