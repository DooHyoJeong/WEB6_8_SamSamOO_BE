name: docker-build

permissions:
  contents: read
  packages: write
  actions: read

on:
  workflow_run:
    workflows: [ "CI" ]
    types: [ completed ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: balaw

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success'
      && github.event.workflow_run.event == 'push'
      && (github.event.workflow_run.head_branch == 'main'
      || startsWith(github.event.workflow_run.head_branch, 'release/')) }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
      - name: Set repo/env vars
        id: vars
        run: |
          REPO="${GITHUB_REPOSITORY,,}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          BRANCH_TAG="${BRANCH//\//-}"
          SHA="${{ github.event.workflow_run.head_sha }}"
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "branch_tag=$BRANCH_TAG" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          if [[ "$BRANCH" == "main" ]]; then
            echo "tags=${{ env.REGISTRY }}/${REPO}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${REPO}/${{ env.IMAGE_NAME }}:prod-$SHA" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.REGISTRY }}/${REPO}/${{ env.IMAGE_NAME }}:rc-${BRANCH_TAG}-${SHA},${{ env.REGISTRY }}/${REPO}/${{ env.IMAGE_NAME }}:rc-${BRANCH_TAG}-latest" >> $GITHUB_OUTPUT
          fi
      - name: Debug – show triggering run & artifacts
        run: |
          echo "run.id      = ${{ github.event.workflow_run.id }}"
          echo "event       = ${{ github.event.workflow_run.event }}"
          echo "head_branch = ${{ github.event.workflow_run.head_branch }}"
          echo "head_sha    = ${{ github.event.workflow_run.head_sha }}"
          echo "Artifacts in that run:"
          curl -sS -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" \
            | jq '.artifacts[] | {name,id,size_in_bytes,expired}'
            # 1) 패턴으로 먼저 받기
      - name: Download backend jar (pattern)
        id: dl
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: backend-jar
          merge-multiple: false
          path: backend/_dl
          repository: ${{ github.repository }}
          run-id: ${{ github.event.workflow_run.id }}
      
      # 2) 패턴 다운로드 성공 시에만 정규화
      - name: Normalize jar path (from pattern)
        if: ${{ steps.dl.outcome == 'success' }}
        run: |
          set -euo pipefail
          DL="${{ steps.dl.outputs.download-path }}"
          echo "download-path=$DL"
          test -d "$DL" || { echo "Download path not found: $DL"; exit 1; }
          # app.jar 우선, 없으면 plain 제외한 *.jar
          JAR=$(find "$DL" -type f \( -name "app.jar" -o -name "*.jar" \) | grep -v plain | head -n1 || true)
          test -n "$JAR" || { echo "No jar found in $DL"; ls -R "$DL"; exit 1; }
          mkdir -p backend/dist
          cp "$JAR" backend/dist/app.jar
          ls -al backend/dist
      
      # 3) 실패하면 → API로 직접 zip 내려받아 풀기 (확정 해결)
      - name: Fallback – download via API
        if: ${{ steps.dl.outcome != 'success' }}
        run: |
          set -euo pipefail
          # 해당 run의 artifact id를 API로 조회
          ARTIFACT_ID=$(curl -sS -H "Authorization: Bearer ${{ github.token }}" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name=="backend-jar") | .id')
          test -n "$ARTIFACT_ID" || { echo "backend-jar not found in artifact list"; exit 1; }
      
          mkdir -p backend/_api backend/dist
          curl -L -H "Authorization: Bearer ${{ github.token }}" \
            -o backend/_api/backend-jar.zip \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${ARTIFACT_ID}/zip"
      
          unzip -o backend/_api/backend-jar.zip -d backend/_api/unzipped >/dev/null
          JAR=$(find backend/_api/unzipped -type f \( -name "app.jar" -o -name "*.jar" \) | grep -v plain | head -n1 || true)
          test -n "$JAR" || { echo "No jar inside artifact zip"; ls -R backend/_api/unzipped; exit 1; }
          cp "$JAR" backend/dist/app.jar
          ls -al backend/dist
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push (with GHA cache)
        uses: docker/build-push-action@v6
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

concurrency:
  group: docker-build-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true
