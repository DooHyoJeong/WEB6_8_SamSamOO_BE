name: cd-test

on:
  workflow_run:
    workflows: ["docker-build"]   # ← docker-build.yml 의 name
    types: [completed]

permissions:
  contents: read
  packages: read

jobs:
  deploy-test:
    if: ${{ github.event.workflow_run.conclusion == 'success'
      && startsWith(github.event.workflow_run.head_branch, 'release/') }}
    runs-on: ubuntu-latest
    environment: test

    steps:
      - name: Derive image tag
        id: vars
        run: |
          BR="${{ github.event.workflow_run.head_branch }}"
          BR_TAG="${BR//\//-}"
          echo "image=ghcr.io/${GITHUB_REPOSITORY,,}/balaw:rc-${BR_TAG}-latest" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy via SSM
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: "i-034c52777b2b88e07"
          working-directory: /
          comment: Deploy
          command: |
            set -euo pipefail
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            install -d -m 700 /home/ec2-user/configs
            cat > /home/ec2-user/configs/test.env.b64 <<'__B64__'
            ${{ secrets.PROD_ENV_BASE64 }}
            __B64__
            if grep -q '[^[:space:]]' /home/ec2-user/configs/test.env.b64; then
              base64 -d /home/ec2-user/configs/test.env.b64 > /home/ec2-user/configs/test.env
              chmod 600 /home/ec2-user/configs/test.env
              shred -u /home/ec2-user/configs/test.env.b64
              USE_ENV_FILE="--env-file /home/ec2-user/configs/test.env"
            else
              rm -f /home/ec2-user/configs/test.env.b64
              USE_ENV_FILE=""
            fi

            docker pull ${{ steps.vars.outputs.image }}
            docker rm -f app || true
            docker run -d --name app --restart=always -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=test \
              $USE_ENV_FILE \
              ${{ steps.vars.outputs.image }}

            for i in {1..30}; do
              if curl -fsS http://127.0.0.1:8080/actuator/health >/dev/null; then
                echo "TEST app is healthy"; exit 0
              fi
              sleep 2
            done
            echo "Health check failed" >&2; exit 1

concurrency:
  group: cd-test-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true