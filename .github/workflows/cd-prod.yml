name: cd-prod

on:
  workflow_run:
    workflows: ["docker-build"]
    types: [completed]

permissions:
  contents: read
  packages: read

jobs:
  deploy-prod:
    if: ${{ github.event.workflow_run.conclusion == 'success'
      && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Derive image tag
        id: vars
        run: |
          echo "image=ghcr.io/${GITHUB_REPOSITORY,,}/balaw:latest" >> $GITHUB_OUTPUT
          # 포트 로테이션: 8080/8081 사용
          echo "port_a=8080" >> $GITHUB_OUTPUT
          echo "port_b=8081" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Zero-downtime Blue-Green over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="${{ steps.vars.outputs.image }}"
            PORT_A=${{ steps.vars.outputs.port_a }}
            PORT_B=${{ steps.vars.outputs.port_b }}
            HEALTH_URL="${HEALTH_URL:-http://127.0.0.1/actuator/health}"  # 서버 환경변수로 덮어쓸 수 있음

            echo "[1/6] Pull image"
            docker pull "$IMAGE"

            echo "[2/6] Detect active port"
            ACTIVE_PORT=0
            if ss -ltn "( sport = :$PORT_A )" | grep -q ":$PORT_A"; then ACTIVE_PORT=$PORT_A; fi
            if ss -ltn "( sport = :$PORT_B )" | grep -q ":$PORT_B"; then ACTIVE_PORT=$PORT_B; fi
            if [ "$ACTIVE_PORT" -eq 0 ]; then
              # 초기 배포: A를 활성으로 가정
              ACTIVE_PORT=$PORT_A
            fi
            if [ "$ACTIVE_PORT" -eq "$PORT_A" ]; then NEW_PORT=$PORT_B; else NEW_PORT=$PORT_A; fi
            echo "ACTIVE_PORT=$ACTIVE_PORT, NEW_PORT=$NEW_PORT"

            echo "[3/6] Start new container on $NEW_PORT"
            NEW_NAME="app-${NEW_PORT}"
            docker rm -f "$NEW_NAME" >/dev/null 2>&1 || true
            docker run -d --name "$NEW_NAME" --restart=always -p ${NEW_PORT}:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              "$IMAGE"

            echo "[4/6] Health check"
            for i in {1..45}; do
              if curl -fsS "$HEALTH_URL" >/dev/null; then
                echo "Health OK"; break
              fi
              sleep 2
              if [ $i -eq 45 ]; then echo "Health check failed" >&2; exit 1; fi
            done

            echo "[5/6] Switch traffic to $NEW_PORT"
            # Nginx 업스트림 파일(예: /etc/nginx/conf.d/app_upstream.conf)에 8080/8081 숫자만 존재한다고 가정
            # 예) proxy_pass http://127.0.0.1:8080;
            UPSTREAM_FILE="${NGINX_UPSTREAM_PATH:-/etc/nginx/conf.d/app_upstream.conf}"
            sudo sed -i "s/127.0.0.1:[0-9]\+/127.0.0.1:${NEW_PORT}/g" "$UPSTREAM_FILE"
            sudo nginx -t
            sudo nginx -s reload

            echo "[6/6] Retire old container on $ACTIVE_PORT"
            OLD_NAME="app-${ACTIVE_PORT}"
            docker rm -f "$OLD_NAME" >/dev/null 2>&1 || true

            echo "Blue-Green switch complete: now serving on $NEW_PORT"

concurrency:
  group: cd-prod
  cancel-in-progress: true
